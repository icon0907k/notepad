{
	"nodes":[
		{"id":"644e0cf9813349dd","type":"group","x":2620,"y":-1100,"width":2220,"height":440,"label":"JDK 1.1"},
		{"id":"01fa68e9fa2c05b3","type":"text","text":"\n### 1. JDK 1.0은 자바 언어의 첫 번째 공식 버전이다. \n자바는 Oak(나뭇잎)이라는 이름으로 시작했으며,나중에 자바로 이름이 변경되었다. 자바는 객체지향, 간결성, 이식성, 보안 등의 특징을 갖춘 언어로 설계 되었다.\n\n### 2. AWT(Abstract Window Toolkit) \nJDK 1.0 그래픽 사용자 인터페이스(GUI)를 개발하기 위한 AWT를 도입했다. AWT는 여러 컴포넌트와 이벤트  처리를 제공하여 다양한 플랫폼에서 일관된 GUI를 만들 수 있도록 도왔다. \n\n### 3. Java Applet 자바 애플릿 도입 \n애플릿은 웹 브라우저에서 실행 되는 자바 애플리케이션으로, 독립적으로 실행되는 프로그램처럼 보이면서 웹 페이지에 삽입되어 다양한 기능을 수행할 수 있다. \n\n### 4. JDK와 JRE 분리 \nJDK1.0은 java 개발 도구와 Java 실행 환경(JRE)이 처름으로 분리된 버전이다. 이로써 개발자는 Java 애플리케이션을 개발하고 실행하는데 필요한 도구를 별도로 설치할 수 있게 되었다. \n\n##### JDK (Java Development Kit)\njava 애플리케이션을 개발하기 위한 도구 모음이다. 컴파일러, 디버거, 자바 소스코드를 관리하는 도구들이 포함되어 있다. \n자바 애플리케이션을 작성하고 빌드하며, 디버깅하고 실행하는 데 필요한 모든 두구와 라이브러리를 포함한다. \n##### JRE (Java Runtime Environment)\nJava 애플리케이션을 실행하기 위한 런타임 환경을 제공한다. JRE는 JVM(Java Virtual Machine, 자바를 실행하는 머신) java 클래스 라이브러리, 자바 실행 환경 설정 등을 포함 한다. \njava 애플리케이션을 실행할 때 필요한 최소한의 환경을 제공한다. 개발자가 아닌 사용자들은 주로 JRE만 설치하여 Java 애플리케이션을 실행할 수 있다. \n","x":1172,"y":-2560,"width":1228,"height":920},
		{"id":"cb710cb46494350a","type":"text","text":"## JDK 1.1(1997년 2월)\n\n### 1. [[내부 클래스 Inner Classes]]\n##### JDK 1.1에서는 내부 클래스 개념이 도입되었다. \n이를 통해서 개발자들은 다른 클래스 내에 클래스를 정의할 수 있게 되었다. 내부 클래스는 캡슐화와 코드 구성에 유용할 수 있다.\t\n\n### 2. [[JavaBeans]]\nJDK 1.1에는 JavaBeans 지원이 포함되어 있다. JavaBeans는 재사용 가능한 소프트웨어 구성 요소를 만들기 위한 컴포넌트 아키텍처로, 특정 규칙을 따르는 클래스를 의미한다. \n\n### 3. [[리플렉션(Reflection)]] \nJDK 1.1에서는 리플렉션 API가 도입되었으며, 개발자들은 런타임 중에 클래스, 메서드, 필드 등을 검사하고 조작할 수 있다.\n\n### 4. [[JDBC (Java Database Connectivity)]]\nJDK 1.1에는 관계형 데이터베이스에 연결하기 위한 표준 Java 인터페이스를 제공하는 JDBC의 초기 버전이 포함되어 있다. JDBC는 Java 애플리케이션이 데이터베이스와 상호 작용하기 쉽게 만들어주었다.\n\n### 5.[[RMI (Remote Method Invocation)]]\nJDK 1.1은 RMI 기능을 향상시켰으며, Java 객체가 원격 기계에 있는 객체의 메서드를 호출할 수 있도록 했다. 이것은 분산 및 네트워크 애플리케이션을 구축하는 데 중요한 기능이다.\n\n### 6.Java IDL (Interface Definition Language)\nJava IDL API가 도입 Java IDL API는 Java 언어로 작성된 객체가 CORBA (Common Object Request Broker Architecture) 표준과 상호 작용할 수 있도록 하는 API이다.\nCORBA는 분산 컴퓨팅 환경에서 객체 간 통신을 위한 표준 아키텍처이다. 객체 지향 시스템에서의 상호 작용을 위한 표준화된 방법을 제공하여 다양한 플랫폼 및 언어 간에 투명한 원격 호출을 가능케 했다.\n","x":1172,"y":-1420,"width":1228,"height":1080},
		{"id":"7a261eafb9d8a143","type":"file","file":"Java Study/History Study/1. JDK 1.1(1997년 2월)/내부 클래스 Inner Classes.md","x":2640,"y":-1080,"width":400,"height":400},
		{"id":"a22932dc126526c2","type":"file","file":"Java Study/History Study/1. JDK 1.1(1997년 2월)/리플렉션(Reflection).md","x":3085,"y":-1080,"width":400,"height":400},
		{"id":"4aa4c56e631b49b0","type":"file","file":"Java Study/History Study/1. JDK 1.1(1997년 2월)/JavaBeans.md","x":3530,"y":-1080,"width":400,"height":400},
		{"id":"355ac6ab4a197e4c","type":"file","file":"Java Study/History Study/1. JDK 1.1(1997년 2월)/JDBC (Java Database Connectivity).md","x":3975,"y":-1080,"width":400,"height":400},
		{"id":"e67b8618c2380502","type":"file","file":"Java Study/History Study/1. JDK 1.1(1997년 2월)/RMI (Remote Method Invocation).md","x":4420,"y":-1080,"width":400,"height":400},
		{"id":"aa1f7e74c12d9aa2","type":"text","text":" Java History","x":1705,"y":-2960,"width":162,"height":62,"color":"1"}
	],
	"edges":[
		{"id":"88e01709a0212615","fromNode":"01fa68e9fa2c05b3","fromSide":"bottom","toNode":"cb710cb46494350a","toSide":"top"},
		{"id":"e1ae280a49484504","fromNode":"cb710cb46494350a","fromSide":"right","toNode":"7a261eafb9d8a143","toSide":"left"},
		{"id":"df14c86f11b053da","fromNode":"aa1f7e74c12d9aa2","fromSide":"bottom","toNode":"01fa68e9fa2c05b3","toSide":"top"}
	]
}